ˆªcell_orderœÙ$3c9cf124-0257-11eb-16ce-0d857dce310fÙ$5d5644b2-0257-11eb-36e9-7f4803cb3558Ù$0f7d5bdc-0258-11eb-05bb-074d1b38c551Ù$ee15c64e-025a-11eb-2158-bd9cbea5f262Ù$57f367d6-025a-11eb-182a-773094da4307Ù$dcf63604-0258-11eb-1466-fb21170c2e1aÙ$841aa488-0259-11eb-351a-c1f1770b3a51Ù$af1aa2b4-0259-11eb-29fe-19ba9462deb9Ù$1efc3566-025a-11eb-2aae-fd953f22edfbÙ$443afbfa-025a-11eb-03c6-e74bb5344e36Ù$686ec0a0-025b-11eb-339e-1158d9b25529Ù$22f24af0-025c-11eb-23d3-b9945bc05a36¥bonds€¬cell_resultsŒÙ$686ec0a0-025b-11eb-339e-1158d9b25529†¦queuedÂ§runningÂ¦output…¤bodyÙ‰<div class="markdown"><p>What about multiqubit gates? We can use the control gate in Yao using the <code>control</code> block.</p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkON ¬rootassigneeÀ§cell_idÙ$686ec0a0-025b-11eb-339e-1158d9b25529§runtimeÍ0§erroredÂÙ$0f7d5bdc-0258-11eb-05bb-074d1b38c551†¦queuedÂ§runningÂ¦output…¤bodyÚ˜<div class="markdown"><p>We can make a cicuit in Yao using <em>chain</em> function. For parameters we define the number of qubits and the operations we&#39;ve to perform on them. Lets say we want to pass two qubits through two X gates. We do this by <code>chain&#40;number of qubits, blocks&#41;</code>. To use the X gate, we use the <code>put</code> block. Run the cell below to see what happens.</p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkO©¬rootassigneeÀ§cell_idÙ$0f7d5bdc-0258-11eb-05bb-074d1b38c551§runtimeÍè§erroredÂÙ$5d5644b2-0257-11eb-36e9-7f4803cb3558†¦queuedÂ§runningÂ¦output…¤bodyÚê<div class="markdown"><p>At the current moment, we don&#39;t have have quantum computers. How do we make quantum circuits then? Well, two things we can do right now are, simulate a few qubits or use the qubits created by corporates like IBM and D&#39;Wave. Using Yao, we can simulate the qubits, without having a quantum computer&#40;based on the known mathematical and physics rules&#41;, although the support to run your circuits on Yao using real qubits is coming to Yao soon.</p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkNK¬rootassigneeÀ§cell_idÙ$5d5644b2-0257-11eb-36e9-7f4803cb3558§runtimeÍà§erroredÂÙ$443afbfa-025a-11eb-03c6-e74bb5344e36†¦queuedÂ§runningÂ¦output…¤body‚£msg¼UndefVarError: Y not definedªstacktrace‘„¤call¯top-level scope§inlinedÂ¤fileÙ53-yao_code.jl#==#443afbfa-025a-11eb-03c6-e74bb5344e36¤line°persist_js_stateÂ¤mimeÙ'application/vnd.pluto.stacktrace+object²last_run_timestampËAØĞm:¬Å¬rootassigneeÀ§cell_idÙ$443afbfa-025a-11eb-03c6-e74bb5344e36§runtimeÀ§erroredÃÙ$3c9cf124-0257-11eb-16ce-0d857dce310f†¦queuedÂ§runningÂ¦output…¤bodyÙg<div class="markdown"><h1>Using Yao - The basics of quantum computing in Julia using Yao.jl</h1>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkN.0¬rootassigneeÀ§cell_idÙ$3c9cf124-0257-11eb-16ce-0d857dce310f§runtimeÍ§erroredÂÙ$af1aa2b4-0259-11eb-29fe-19ba9462deb9†¦queuedÂ§runningÂ¦output…¤body‚£msg¼UndefVarError: X not definedªstacktrace‘„¤call¯top-level scope§inlinedÂ¤fileÙ53-yao_code.jl#==#af1aa2b4-0259-11eb-29fe-19ba9462deb9¤line°persist_js_stateÂ¤mimeÙ'application/vnd.pluto.stacktrace+object²last_run_timestampËAØĞm8¦¨¬rootassigneeÀ§cell_idÙ$af1aa2b4-0259-11eb-29fe-19ba9462deb9§runtimeÀ§erroredÃÙ$841aa488-0259-11eb-351a-c1f1770b3a51†¦queuedÂ§runningÂ¦output…¤bodyÙÊ<div class="markdown"><p>Assume we have 5 qubits and we have to pass each through an X gate. We can use the <code>repeat</code> block to pass the given number of qubits through the same gate.</p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkO2ß¬rootassigneeÀ§cell_idÙ$841aa488-0259-11eb-351a-c1f1770b3a51§runtimeÍø§erroredÂÙ$1efc3566-025a-11eb-2aae-fd953f22edfb†¦queuedÂ§runningÂ¦output…¤bodyÙD<div class="markdown"><p>What about the Y, Z and H gate? </p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkO@–¬rootassigneeÀ§cell_idÙ$1efc3566-025a-11eb-2aae-fd953f22edfb§runtimeÍh§erroredÂÙ$dcf63604-0258-11eb-1466-fb21170c2e1a†¦queuedÂ§runningÂ¦output…¤body‚£msg¼UndefVarError: X not definedªstacktrace‘„¤call¯top-level scope§inlinedÂ¤fileÙ53-yao_code.jl#==#dcf63604-0258-11eb-1466-fb21170c2e1a¤line°persist_js_stateÂ¤mimeÙ'application/vnd.pluto.stacktrace+object²last_run_timestampËAØĞm6¨ï¬rootassigneeÀ§cell_idÙ$dcf63604-0258-11eb-1466-fb21170c2e1a§runtimeÀ§erroredÃÙ$57f367d6-025a-11eb-182a-773094da4307†¦queuedÂ§runningÂ¦output…¤body‚£msgÙuArgumentError: Package Yao not found in current path:
- Run `import Pkg; Pkg.add("Yao")` to install the Yao package.
ªstacktrace’„¤call»require(::Module, ::Symbol)§inlinedÂ¤fileªloading.jl¤lineÍ}„¤call¯top-level scope§inlinedÂ¤fileÙ53-yao_code.jl#==#57f367d6-025a-11eb-182a-773094da4307¤line°persist_js_stateÂ¤mimeÙ'application/vnd.pluto.stacktrace+object²last_run_timestampËAØĞm^1¬rootassigneeÀ§cell_idÙ$57f367d6-025a-11eb-182a-773094da4307§runtimeÀ§erroredÃÙ$22f24af0-025c-11eb-23d3-b9945bc05a36†¦queuedÂ§runningÂ¦output…¤body‚£msg¼UndefVarError: X not definedªstacktrace‘„¤call¯top-level scope§inlinedÂ¤fileÙ53-yao_code.jl#==#22f24af0-025c-11eb-23d3-b9945bc05a36¤line°persist_js_stateÂ¤mimeÙ'application/vnd.pluto.stacktrace+object²last_run_timestampËAØĞm<µ|¬rootassigneeÀ§cell_idÙ$22f24af0-025c-11eb-23d3-b9945bc05a36§runtimeÀ§erroredÃÙ$ee15c64e-025a-11eb-2158-bd9cbea5f262†¦queuedÂ§runningÂ¦output…¤bodyÙå<div class="markdown"><p><strong>##</strong> or single <strong>#</strong> sign mean comments in julia. It means that anything written after # or ## won&#39;t be read as a part of the program, in the line you used them.</p>
</div>°persist_js_stateÂ¤mime©text/html²last_run_timestampËAØĞkO$Ä¬rootassigneeÀ§cell_idÙ$ee15c64e-025a-11eb-2158-bd9cbea5f262§runtimeÍL§erroredÂ«cell_inputsŒÙ$686ec0a0-025b-11eb-339e-1158d9b25529ƒ§cell_idÙ$686ec0a0-025b-11eb-339e-1158d9b25529¤codeÙamd"What about multiqubit gates? We can use the control gate in Yao using the ` control ` block." «code_foldedÃÙ$0f7d5bdc-0258-11eb-05bb-074d1b38c551ƒ§cell_idÙ$0f7d5bdc-0258-11eb-05bb-074d1b38c551¤codeÚSmd"We can make a cicuit in Yao using *chain* function. For parameters we define the number of qubits and the operations we've to perform on them. Lets say we want to pass two qubits through two X gates. We do this by ` chain(number of qubits, blocks) `. To use the X gate, we use the ` put ` block. Run the cell below to see what happens."«code_foldedÃÙ$5d5644b2-0257-11eb-36e9-7f4803cb3558ƒ§cell_idÙ$5d5644b2-0257-11eb-36e9-7f4803cb3558¤codeÚ¼md"At the current moment, we don't have have quantum computers. How do we make quantum circuits then? Well, two things we can do right now are, simulate a few qubits or use the qubits created by corporates like IBM and D'Wave. Using Yao, we can simulate the qubits, without having a quantum computer\(based on the known mathematical and physics rules\), although the support to run your circuits on Yao using real qubits is coming to Yao soon."«code_foldedÃÙ$443afbfa-025a-11eb-03c6-e74bb5344e36ƒ§cell_idÙ$443afbfa-025a-11eb-03c6-e74bb5344e36¤codeÙ}let
	circuit = chain(3, put(1=>Y), put(2=>Z), put(3=>H), repeat(Y, 1:2), repeat(Z, 1:2), repeat(H, [1 3]))
	plot(circuit)
end«code_foldedÂÙ$3c9cf124-0257-11eb-16ce-0d857dce310fƒ§cell_idÙ$3c9cf124-0257-11eb-16ce-0d857dce310f¤codeÙGmd"# Using Yao - The basics of quantum computing in Julia using Yao.jl"«code_foldedÃÙ$af1aa2b4-0259-11eb-29fe-19ba9462deb9ƒ§cell_idÙ$af1aa2b4-0259-11eb-29fe-19ba9462deb9¤codeÙ‡plot(chain(5, repeat(X,1:5))) #plot function takes a circuit, which repeats the X gate on the qubits 1:5 or from 1st qubit to 5th qubit«code_foldedÂÙ$841aa488-0259-11eb-351a-c1f1770b3a51ƒ§cell_idÙ$841aa488-0259-11eb-351a-c1f1770b3a51¤codeÙ¡md"Assume we have 5 qubits and we have to pass each through an X gate. We can use the ` repeat ` block to pass the given number of qubits through the same gate."«code_foldedÃÙ$1efc3566-025a-11eb-2aae-fd953f22edfbƒ§cell_idÙ$1efc3566-025a-11eb-2aae-fd953f22edfb¤codeÙ$md"What about the Y, Z and H gate? "«code_foldedÃÙ$dcf63604-0258-11eb-1466-fb21170c2e1aƒ§cell_idÙ$dcf63604-0258-11eb-1466-fb21170c2e1a¤codeÚlet
	circuit = chain(2, put(1=>X), put(2=>X)); #define a variable "circuit" and "put" an X gate on the first qubit, and then put an X gate on the second qubit
	plot(circuit) #plot function, which takes a circuit for a parameter and prints the circuit diagram.
end«code_foldedÂÙ$57f367d6-025a-11eb-182a-773094da4307ƒ§cell_idÙ$57f367d6-025a-11eb-182a-773094da4307¤codeÙ9using Yao, YaoPlots #calling the Yao and YaoPlots package«code_foldedÂÙ$22f24af0-025c-11eb-23d3-b9945bc05a36ƒ§cell_idÙ$22f24af0-025c-11eb-23d3-b9945bc05a36¤codeÙ¦plot(chain(2, control(1, 2=>X))) #Which translates to if the state of the 1st qubit is |1>, perform X gate to the 2nd qubit or "put" the 2nd qubit through the X gate.«code_foldedÂÙ$ee15c64e-025a-11eb-2158-bd9cbea5f262ƒ§cell_idÙ$ee15c64e-025a-11eb-2158-bd9cbea5f262¤codeÙªmd" **\#\#** or single **#** sign mean comments in julia. It means that anything written after # or ## won't be read as a part of the program, in the line you used them."«code_foldedÃ«notebook_idÙ$da6ca592-726c-11eb-1ceb-6db0fcf98f13«in_temp_dirÂ©shortpath­3-yao_code.jl¤pathÙc/home/runner/work/QuantumBFS.github.io/QuantumBFS.github.io/notebooks/getting-started/3-yao_code.jl